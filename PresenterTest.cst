<%-- 
MIT License

Copyright (c) [2020] [Jose Roberto Taveras Galvan]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Name: Template de Entity
Author:Jose Roberto Taveras
Description: Para usar integrado con wisej
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Property Name="NameSpaceBusinessObjects" Type="System.String"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="ClassName" Type="System.String"%>
<%@ Property Name="Licence" Type="System.String"%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table to get the data from." %>
//Author: Jose Roberto Taveras
//Email:roberto.taveras@hotmail.com
//Description: Unit test del presenter <%=ClassName%>Presenter
//Fecha:<%= DateTime.Now%>
//Licencia:<%=Licence%>

using <%=NameSpaceBusinessObjects%>;
using <%=NameSpaceBusinessObjects%>.Interfaces;
using <%=NameSpaceBusinessObjects%>.Mocks;
using <%=NameSpaceBusinessObjects%>.Repository;
using <%=NameSpaceBusinessObjects%>.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace  UnitTestProject<%=NameSpaceBusinessObjects%>
{
    [TestClass]
    public class <%=ClassName%>PresenterTest
    {

        IContext _context;
        IPresenter _<%=ClassNameToCamelCase()%>Presenter = null;
        public <%=ClassName%>PresenterTest()
        {
            _context = new MyContext(ContextName.Name);
            _context.UserName = "admin";
            _context.LocalizationName = "es-DO";
            _context.ResourceManager = Resource.ResourceManager;
        }
        
        private void tearDown()
        {
            _<%=ClassNameToCamelCase()%>Presenter.Delete();
        }

        private void setter(I<%=ClassName%> sender) 
        {
        
        }
        
        [TestMethod]
        public void TestAddAndSave()
        {

            I<%=ClassName%> _<%=ClassNameToCamelCase()%> = new Mock<%=ClassName%>();
            _<%=ClassNameToCamelCase()%>Presenter = new <%=ClassName%>Presenter(_context, _<%=ClassNameToCamelCase()%>);
            _<%=ClassNameToCamelCase()%>Presenter.Add();

            //configura las propiedades aqui
            setter(_<%=ClassNameToCamelCase()%>);

            Assert.IsTrue( _<%=ClassNameToCamelCase()%>Presenter.Save());
            tearDown();

        }

        [TestMethod]
        public void TestAddSaveAndDelete()
        {

            I<%=ClassName%> _<%=ClassNameToCamelCase()%> = new Mock<%=ClassName%>();
            _<%=ClassNameToCamelCase()%>Presenter = new <%=ClassName%>Presenter(_context, _<%=ClassNameToCamelCase()%>);
            _<%=ClassNameToCamelCase()%>Presenter.Add();
            
            //configura las propiedades aqui
            setter(_<%=ClassNameToCamelCase()%>);

            Assert.IsTrue( _<%=ClassNameToCamelCase()%>Presenter.Save());
            Assert.IsTrue( _<%=ClassNameToCamelCase()%>Presenter.Delete());
            tearDown();
        }

        [TestMethod]
        public void TestAddSaveFindAndDelete()
        {

            I<%=ClassName%> _<%=ClassNameToCamelCase()%> = new Mock<%=ClassName%>();
            _<%=ClassNameToCamelCase()%>Presenter = new <%=ClassName%>Presenter(_context, _<%=ClassNameToCamelCase()%>);
            _<%=ClassNameToCamelCase()%>Presenter.Add();

            //configura las propiedades aqui
            setter(_<%=ClassNameToCamelCase()%>);

            Assert.IsTrue(_<%=ClassNameToCamelCase()%>Presenter.Save());
            Assert.IsTrue(_<%=ClassNameToCamelCase()%>Presenter.Find(_<%=ClassNameToCamelCase()%>.<%=SourceTable.Columns[0].Name%>));
            Assert.IsTrue(_<%=ClassNameToCamelCase()%>Presenter.Delete());
            tearDown();


        }
    }
}

 <script runat="template">

private string ClassNameToCamelCase(){
   return StringUtil.ToCamelCase(ClassName);
      
 }
 
 </Script>