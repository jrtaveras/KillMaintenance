<%-- 
Name: Template de Entity
Author:Jose Roberto Taveras
Description: Para usar integrado con wisej
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Property Name="NameSpaceBusinessObjects" Type="System.String"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="ClassName" Type="System.String"%>
<%@ Property Name="Licence" Type="System.String"%>

//Author: Jose Roberto Taveras
//Email:roberto.taveras@hotmail.com
//Description: Unit test del presenter <%=ClassName%>Presenter
//Fecha:<%= DateTime.Now%>
//Licencia:<%=Licence%>

using <%=NameSpaceBusinessObjects%>;
using <%=NameSpaceBusinessObjects%>.Interfaces;
using <%=NameSpaceBusinessObjects%>.Mocks;
using <%=NameSpaceBusinessObjects%>.Repository;
using <%=NameSpaceBusinessObjects%>.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace  UnitTestProject<%=NameSpaceBusinessObjects%>
{
    [TestClass]
    public class <%=ClassName%>PresenterTest
    {

        IContext _context;
        IPresenter _<%=ClassNameToCamelCase()%>Presenter = null;
        public <%=ClassName%>PresenterTest()
        {
            _context = new MyContext(ContextName.Name);
            _context.UserName = "admin";
            _context.LocalizationName = "es-DO";
            _context.ResourceManager = Resource.ResourceManager;
        }
        
        private void tearDown()
        {
            _<%=ClassNameToCamelCase()%>Presenter.Delete();
        }

        private void setter(I<%=ClassName%> sender) 
        {
        
        }
        
        [TestMethod]
        public void TestAddAndSave()
        {

            I<%=ClassName%> _<%=ClassNameToCamelCase()%> = new Mock<%=ClassName%>();
            _<%=ClassNameToCamelCase()%>Presenter = new <%=ClassName%>Presenter(_context, _<%=ClassNameToCamelCase()%>);
            _<%=ClassNameToCamelCase()%>Presenter.Add();

            //configura las propiedades aqui
            setter(_<%=ClassNameToCamelCase()%>);

            Assert.IsTrue( _<%=ClassNameToCamelCase()%>Presenter.Save());
            tearDown();

        }

        [TestMethod]
        public void TestAddSaveAndDelete()
        {

            I<%=ClassName%> _<%=ClassNameToCamelCase()%> = new Mock<%=ClassName%>();
            _<%=ClassNameToCamelCase()%>Presenter = new <%=ClassName%>Presenter(_context, _<%=ClassNameToCamelCase()%>);
            _<%=ClassNameToCamelCase()%>Presenter.Add();
            
            //configura las propiedades aqui
            setter(_<%=ClassNameToCamelCase()%>);

            Assert.IsTrue( _<%=ClassNameToCamelCase()%>Presenter.Save());
            Assert.IsTrue( _<%=ClassNameToCamelCase()%>Presenter.Delete());
            tearDown();
        }

        [TestMethod]
        public void TestAddSaveFindAndDelete()
        {

            I<%=ClassName%> _<%=ClassNameToCamelCase()%> = new Mock<%=ClassName%>();
            _<%=ClassNameToCamelCase()%>Presenter = new <%=ClassName%>Presenter(_context, _<%=ClassNameToCamelCase()%>);
            _<%=ClassNameToCamelCase()%>Presenter.Add();

            //configura las propiedades aqui
            setter(_<%=ClassNameToCamelCase()%>);

            Assert.IsTrue(_<%=ClassNameToCamelCase()%>Presenter.Save());
            Assert.IsTrue(_<%=ClassNameToCamelCase()%>Presenter.Find(_<%=ClassNameToCamelCase()%>.Id));
            Assert.IsTrue(_<%=ClassNameToCamelCase()%>Presenter.Delete());
            tearDown();


        }
    }
}

 <script runat="template">

private string ClassNameToCamelCase(){
   return StringUtil.ToCamelCase(ClassName);
      
 }
 
 </Script>