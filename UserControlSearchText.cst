<%-- 
MIT License

Copyright (c) [2020] [Jose Roberto Taveras Galvan]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Name: Template de Entity
Author:Jose Roberto Taveras
Description: Para usar integrado con wisej
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Property Name="NameSpaceUI" Type="System.String"%>
<%@ Property Name="Licence" Type="System.String"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Collections.Generic" %>

//Author: Jose Roberto Taveras
//Email:roberto.taveras@hotmail.com
//Description: control generico base 
//Fecha:<%= DateTime.Now%>
//Licencia:<%=Licence%>
using BusinessObjects.Interfaces;
using System;
using System.ComponentModel;
using System.Reflection;
using Wisej.Web;

namespace <%=NameSpaceUI%>.Controls
{
    public delegate void RaiseUserControlSearchText(string senderValue);
    [Browsable(true), EditorBrowsable(EditorBrowsableState.Always)]
    public partial class UserControlSearchText : Wisej.Web.UserControl
    {
        public event RaiseUserControlSearchText OnValueChange;
        public string Label { get => textBoxDisplay.Label.Text; set => textBoxDisplay.Label.Text = value; }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public LabelPosition PotitionLabel { set { textBoxDisplay.Label.Position = value; } }

        private object _search;
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public string ValueMember { get; set; }
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public string DisplayMember { get; set; }
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public string Value
        {
            get
            {
                return textBoxValue.Text;
            }
            set
            {
                DisplayValue = string.Empty;
                textBoxValue.Text = value;
                if (!string.IsNullOrEmpty(textBoxValue.Text))
                    search();
                if (OnValueChange != null)
                    OnValueChange(value ?? string.Empty);
            }
        }
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public string DisplayValue { get => textBoxDisplay.Text; set => textBoxDisplay.Text = value; }

        public UserControlSearchText()
        {
            InitializeComponent();
        }
        public void SetDataSource(object search)
        {
            _search = search;
        }

        private void search()
        {
            if (_search == null)
            {
                throw new Exception("Debe especificar el presenter");
            }

            if (string.IsNullOrEmpty(ValueMember))
            {
                throw new Exception("Debe especificar el value member");
            }

            if (string.IsNullOrEmpty(DisplayMember))
            {
                throw new Exception("Debe especificar el display member");
            }


            Type objType = _search.GetType(); ;

            MethodInfo method = objType.GetMethod("FindById");
            object found = method.Invoke(_search, new object[] { textBoxValue.Text ?? string.Empty });

            if (found != null)
            {
                var id = found.GetType().GetProperty(ValueMember).GetValue(found).ToString();
                textBoxDisplay.Text = found.GetType().GetProperty(DisplayMember).GetValue(found).ToString();
            }
            else
            {
                Value = string.Empty;
                DisplayValue = string.Empty;
            }
        }

        private void buttonSearch_Click(object sender, EventArgs e)
        {
            var popop = new UserPopupSearch(_search);
            popop.Closed += (oSender, oE) => {
                if (popop.Id != null)
                    Value = popop.Id.ToString();
            };
            popop.ShowPopup(this);
        }

        private void textBoxValue_Leave(object sender, EventArgs e)
        {
            try
            {
                search();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Ha ocurrido un error" + ex.Message, "AVISO!!");
            }
        }
    }
}