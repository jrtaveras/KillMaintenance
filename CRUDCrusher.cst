<%-- 
Name: Template de Presenter
Author:Jose Roberto Taveras
Description: Para usar integrado con wisej
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import NameSpace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import  NameSpace="System.Data" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table to get the data from." %>
<%@ Property Name="QueryTableColumns" Type="SchemaExplorer.ColumnSchemaCollection" Category="Context" Description="Columns to show in the dataGridView" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Property Name="NameSpaceBusinessObjects" Category="Context" Type="System.String"%>
<%@ Property Name="Licence" Category="Context" Type="System.String"%>
<%@ Property Name="NameSpaceUI" Category="Context" Type="System.String"%>
<%@ Property Name="NameSpaceCommonUI" Category="Context" Type="System.String"%>
<%@ Property Name="OutPutDirBusinessObjects" Type="System.String" Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Category="Output" Description="Directorio destino de escritura para el BO" %>
<%@ Property Name="OutPutDirUserControls" Type="System.String" Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Category="Output" Description="Directorio destino de escritura UI" %>
<%@ Property Name="OutPutDirCommonUI" Type="System.String" Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Category="Output" Description="Directorio destino de escritura Form UI" %>
<%@ Property Name="OutPutDirUnitTestBusinessObjects" Type="System.String" Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Category="Output" Description="Directorio destino de escritura Unit Test BusinessObjects" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Register Name="IEntityTemplate" Template="IEntity.cst" %>
<%@ Register Name="CustomIEntityTemplate" Template="CustomIEntity.cst" %>
<%@ Register Name="HelperValidateEntityTemplate" Template="HelperValidateEntity.cst" %>
<%@ Register Name="HelperDataTableTemplate" Template="HelperDataTable.cst" %>
<%@ Register Name="MockViewsTemplate" Template="MockViews.cst" %>
<%@ Register Name="HelperControlsToValidateTemplate" Template="HelperControlsToValidate.cst" %>
<%@ Register Name="GeneralSearchFactoryTemplate" Template="GeneralSearchFactory.cst" %>
<%@ Register Name="GeneralSearchFactoryPresenterTemplate" Template="GeneralSearchFactoryPresenter.cst" %>
<%@ Register Name="RepositoryTemplate" Template="Repository.cst" %>
<%@ Register Name="IContextTemplate" Template="IContext.cst" %>
<%@ Register Name="EntityTemplate" Template="Entity.cst" %>
<%@ Register Name="CustomEntityTemplate" Template="CustomEntity.cst" %>
<%@ Register Name="PresenterTemplate" Template="Presenter.cst" %>
<%@ Register Name="PresenterTestTemplate" Template="PresenterTest.cst" %>
<%@ Register Name="PresenterCustomTemplate" Template="Presenter.Custom.cst" %>
<%@ Register Name="UserInterfaceGeneratedTemplate" Template="UserInterfaceGenerated.cst" %>
<%@ Register Name="UserInterfaceCustomTemplate" Template="UserInterfaceCustom.cst" %>
<%@ Register Name="UserInterfaceResFileTemplate" Template="UserInterfaceResFile.cst" %>
<%@ Register Name="IPresenterTemplate" Template="IPresenter.cst" %>
<%@ Register Name="SearchFileTemplate" Template="Search.cst" %>
<%@ Register Name="ISearchTemplate" Template="ISearch.cst" %>
<%@ Register Name="ISearchPresenterTemplate" Template="ISearchPresenter.cst" %>
<%@ Register Name="IValidateTemplate" Template="IValidate.cst" %>
<%@ Register Name="WindowSearchTemplate" Template="WindowSearch.cst" %>
<%@ Register Name="WindowSearchDesignerTemplate" Template="WindowSearch.Designer.cst" %>
<%@ Register Name="WindowsSearchResFileTemplate" Template="WindowsSearchResFile.cst" %>
<%@ Register Name="UserControlGeographyResFileTemplate" Template="UserControlGeographyResFile.cst" %>
<%@ Register Name="UserControlGeographyTemplate" Template="UserControlGeography.cst" %>
<%@ Register Name="UserControlGeographyDesignerTemplate" Template="UserControlGeography.Designer.cst" %>
<%@ Register Name="UserControlBaseResFileTemplate" Template="UserControlBaseResFile.cst" %>
<%@ Register Name="UserControlBaseTemplate" Template="UserControlBase.cst" %>
<%@ Register Name="UserControlBaseDesignerTemplate" Template="UserControlBaseDesigner.cst" %>
<%@ Register Name="HelperDataTableToExcelTemplate" Template="HelperDataTableToExcel.cst" %>
<%@ Register Name="BootstrapperTemplate" Template="Bootstrapper.cst" %>
<%@ Register Name="RegionalizationHelperTemplate" Template="RegionalizationHelper.cst" %>
<%@ Register Name="DataGridViewExtensionTemplate" Template="DataGridViewExtension.cst" %>
<%@ Register Name="ResourceTemplate" Template="Resource.resx.cst" %>
<%@ Register Name="ResourceENTemplate" Template="Resource.en-US.resx.cst" %>
<%@ Register Name="DateInitializationTemplate" Template="DateInitialization.cst" %>
<%@ Property Name="GenerateBusinessObjects" Category="Regenerar" Type="System.Boolean" Default="False" Optional="True" Description="Si lo pones en True sobreescribe todas las clases del BO"%>
<%@ Property Name="GeneratePresenters" Category="Regenerar" Type="System.Boolean" Default="False" Optional="True" Description="Si lo pones en True sobreescribe todas las clases del Presenters"%>
<%@ Property Name="GenerateInterfaces" Category="Regenerar" Type="System.Boolean" Default="False" Optional="True" Description="Si lo pones en True sobreescribe todas las clases del Interfaces"%>
<%@ Property Name="GenerateUserControl" Category="Regenerar" Type="System.Boolean" Default="False" Optional="True" Description="Si lo pones en True sobreescribe el control"%>
<%@ Property Name="GenerateWindowsSearch" Category="Regenerar" Type="System.Boolean" Default="False" Optional="True" Description="Si lo pones en True sobreescribe el Form de busqueda"%>
<%@ Property Name="modelBuilder" Category="PlaceHolder" Type="System.String" Default="//modelBuider no remueva esto usado por CodeSmith" Optional="True"%>
<%@ Property Name="dbSetVirtual" Category="PlaceHolder"  Type="System.String" Default="//property no remueva esto usado por CodeSmith" Optional="True"%>
<script runat="template">
public override void Render(TextWriter writer)
{
    RenderChildChild();
}

public void RenderChildChild(){
  
    string titleGenericSearch = "//Requerido por el generador de CodeSmith no modifique esto";
    string modelBuilder = "//modelBuider no remueva esto usado por CodeSmith";
    string dbSetVirtual = "//property no remueva esto usado por CodeSmith";
    
    bool found = File.Exists(this.OutPutDirBusinessObjects+"\\Helpers\\HelperValidateEntity.cs");
    if(!found)
    {
        
        HelperValidateEntityTemplate helperValidationEntity = this.Create<HelperValidateEntityTemplate>();
        helperValidationEntity.NameSpaceBusinessObjects =  NameSpaceBusinessObjects;
        helperValidationEntity.Licence = Licence;
        helperValidationEntity.RenderToFile(this.OutPutDirBusinessObjects+"\\Helpers\\HelperValidateEntity.cs",true);
       
    }
    
    found = File.Exists(this.OutPutDirBusinessObjects+"\\Attributes\\DateInitialization.cs");
    if(!found)
    {
        DateInitializationTemplate dateInitializationTemplate = this.Create<DateInitializationTemplate>();
        dateInitializationTemplate.NameSpaceBusinessObjects =  NameSpaceBusinessObjects;
        dateInitializationTemplate.RenderToFile(this.OutPutDirBusinessObjects+"\\Helpers\\DateInitialization.cs",true);
    }
    
    found = File.Exists(this.OutPutDirBusinessObjects+"\\Resource.resx");
    if(!found)
    {
        ResourceTemplate resourceTemplate = this.Create<ResourceTemplate>();
        resourceTemplate.RenderToFile(this.OutPutDirBusinessObjects+"\\Resource.resx",false);
    }
    
    found = File.Exists(this.OutPutDirBusinessObjects+"\\Resource.en-US.resx");
    if(!found)
    {
        ResourceENTemplate resourceENTemplate = this.Create<ResourceENTemplate>();
        resourceENTemplate.RenderToFile(this.OutPutDirBusinessObjects+"\\Resource.en-US.resx",false);
    }
    
    found = File.Exists(this.OutPutDirBusinessObjects+"\\Helpers\\HelperDataTable.cs");
    if(!found)
    {
        
        HelperDataTableTemplate helperDataTableTemplate = this.Create<HelperDataTableTemplate>();
        helperDataTableTemplate.NameSpaceBusinessObjects =  NameSpaceBusinessObjects;
        helperDataTableTemplate.Licence = Licence;
        helperDataTableTemplate.RenderToFile(this.OutPutDirBusinessObjects+"\\Helpers\\HelperDataTable.cs",true);
      

    }
    
    found = File.Exists(this.OutPutDirBusinessObjects+"\\Mocks\\Mock"+SourceTable.Name+".cs");
    if(!found || GenerateBusinessObjects)
    {
        
        MockViewsTemplate mockViewsTemplate = this.Create<MockViewsTemplate>();
        mockViewsTemplate.NameSpaceBusinessObjects =  NameSpaceBusinessObjects;
        mockViewsTemplate.ClassName = SourceTable.Name;
        mockViewsTemplate.SourceTable = SourceTable;
        mockViewsTemplate.Licence = Licence;
        mockViewsTemplate.RenderToFile(this.OutPutDirBusinessObjects+"\\Mocks\\Mock"+SourceTable.Name+".cs",true);

    }
    
    found = File.Exists(this.OutPutDirUserControls+"\\Helpers\\HelperControlsToValidate.cs");
    if(!found)
    {
        HelperControlsToValidateTemplate helperControlToValidate = this.Create<HelperControlsToValidateTemplate>();
        helperControlToValidate.NameSpaceUI =  NameSpaceUI;
        helperControlToValidate.Licence = Licence;
        helperControlToValidate.RenderToFile(this.OutPutDirUserControls+"\\Helpers\\HelperControlsToValidate.cs",true);
    }
    
    found = File.Exists(this.OutPutDirBusinessObjects+"\\Factories\\GeneralSearchFactory.cs");
    if(!found)
    {
        GeneralSearchFactoryTemplate generalSearchFactory = this.Create<GeneralSearchFactoryTemplate>();
        generalSearchFactory.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
        generalSearchFactory.Licence = Licence;
        generalSearchFactory.RenderToFile(this.OutPutDirBusinessObjects+"\\Factories\\GeneralSearchFactory.cs",true);
    }
 
    
    var generalSearch = File.ReadAllText(this.OutPutDirBusinessObjects+"\\Factories\\GeneralSearchFactory.cs");
    
    
     if(!generalSearch.Contains("<"+SourceTable.Name+">"))
     {
            
            generalSearch = generalSearch.Replace(titleGenericSearch,GetISearchPresenter());
            File.WriteAllText(this.OutPutDirBusinessObjects+"\\Factories\\GeneralSearchFactory.cs",generalSearch);
         
     }
     
    
     
     found = File.Exists(this.OutPutDirBusinessObjects+"\\Interfaces\\IContext.cs");
     var context = string.Empty;
     if(found){
         context  = File.ReadAllText(this.OutPutDirBusinessObjects+"\\Interfaces\\IContext.cs");
     }
     else
     {
         IContextTemplate contextTemp = this.Create<IContextTemplate>();
         contextTemp.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
         contextTemp.Licence = Licence;
         context = contextTemp.RenderToString();
     }
     
     if(!context.Contains("DbSet<"+SourceTable.Name+">"))
     {
         context = context.Replace(dbSetVirtual,GetDbSet());
         
        if(!found)
            Directory.CreateDirectory(this.OutPutDirBusinessObjects+"\\Interfaces");

         File.WriteAllText(this.OutPutDirBusinessObjects+"\\Interfaces\\IContext.cs",context);
     }
     
    
     found = File.Exists(this.OutPutDirBusinessObjects+"\\Repository\\MyContext.cs");
     var repository = string.Empty;
     if(found){
         repository = File.ReadAllText(this.OutPutDirBusinessObjects+"\\Repository\\MyContext.cs");
     }
     else
     {
         RepositoryTemplate repositoryTemp = this.Create<RepositoryTemplate>();
         repositoryTemp.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
         repositoryTemp.Licence = Licence;
         repository = repositoryTemp.RenderToString();
     }
     
     if(!repository.Contains("DbSet<"+SourceTable.Name+">"))
     {
         repository = repository.Replace(modelBuilder,GetModelBuilder());
         repository = repository.Replace(dbSetVirtual,GetVirtualDbSet());
         
         found = Directory.Exists(this.OutPutDirBusinessObjects+"\\Repository");
         if(!found)
             Directory.CreateDirectory(this.OutPutDirBusinessObjects+"\\Repository");

         File.WriteAllText(this.OutPutDirBusinessObjects+"\\Repository\\MyContext.cs",repository);
     }
    

    found = File.Exists(this.OutPutDirBusinessObjects+"\\Interfaces\\Generated\\"+"I"+SourceTable.Name+".cs");
    if(!found || GenerateBusinessObjects){
      IEntityTemplate ientity = this.Create<IEntityTemplate>();
      ientity.ClassName = "I"+SourceTable.Name;
      ientity.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      ientity.SourceTable = SourceTable;
      ientity.Licence = Licence;
      ientity.RenderToFile(this.OutPutDirBusinessObjects+"\\Interfaces\\Generated\\"+"I"+SourceTable.Name+".cs",GenerateBusinessObjects);
       
      found = File.Exists(this.OutPutDirBusinessObjects+"\\Interfaces\\"+"I"+SourceTable.Name+".cs");
        
      if(!found)
      {
          CustomIEntityTemplate customIEntity = this.Create<CustomIEntityTemplate>();
          customIEntity.ClassName = "I"+SourceTable.Name;
          customIEntity.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
          customIEntity.Licence = Licence;
          customIEntity.SourceTable = SourceTable;
          customIEntity.RenderToFile(this.OutPutDirBusinessObjects+"\\Interfaces\\"+"I"+SourceTable.Name+".cs",true); 
      }

      EntityTemplate entity = this.Create<EntityTemplate>();
      entity.ClassName = SourceTable.Name;
      entity.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      entity.Licence = Licence;
      entity.SourceTable = SourceTable;
      entity.RenderToFile(this.OutPutDirBusinessObjects+"\\Models\\Generated\\"+SourceTable.Name+".cs",GenerateBusinessObjects);
      
      found = File.Exists(this.OutPutDirBusinessObjects+"\\Models\\"+SourceTable.Name+".cs");
      
      if(!found)
      {
          CustomEntityTemplate customEntity = this.Create<CustomEntityTemplate>();
          customEntity.ClassName = SourceTable.Name;
          customEntity.Licence = Licence;
          customEntity.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
          customEntity.SourceTable = SourceTable;
          customEntity.RenderToFile(this.OutPutDirBusinessObjects+"\\Models\\"+SourceTable.Name+".cs",true);
      }

  }
  
  found =  File.Exists(this.OutPutDirBusinessObjects+"\\Interfaces\\IValidate.cs");
  
  if(!found || GenerateInterfaces){
      IPresenterTemplate ipresenter = this.Create<IPresenterTemplate>();
      ipresenter.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      ipresenter.Licence = Licence;
      ipresenter.RenderToFile(this.OutPutDirBusinessObjects+"\\Interfaces\\IPresenter.cs",GenerateInterfaces);
      
      ISearchTemplate isearch = this.Create<ISearchTemplate>();
      isearch.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      isearch.Licence = Licence;
      isearch.RenderToFile(this.OutPutDirBusinessObjects+"\\Interfaces\\ISearch.cs",GenerateInterfaces);
      
      ISearchPresenterTemplate isearchPresenter = this.Create<ISearchPresenterTemplate>();
      isearchPresenter.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      isearchPresenter.Licence = Licence;
      isearchPresenter.RenderToFile(this.OutPutDirBusinessObjects+"\\Interfaces\\ISearchPresenter.cs",GenerateInterfaces);

      IValidateTemplate ivalidate = this.Create<IValidateTemplate>();
      ivalidate.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      ivalidate.Licence = Licence;
      ivalidate.RenderToFile(this.OutPutDirBusinessObjects+"\\Interfaces\\IValidate.cs",GenerateInterfaces);
      
  }
  
  
  found =  File.Exists(this.OutPutDirBusinessObjects+"\\Services\\"+SourceTable.Name+"Presenter.cs");
  
  if(GeneratePresenters || !found){
      
      PresenterTemplate childPresenter = this.Create<PresenterTemplate>();
      childPresenter.ClassName = SourceTable.Name;
      childPresenter.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      childPresenter.Licence = Licence;
      childPresenter.SourceTable = SourceTable;
      childPresenter.RenderToFile(this.OutPutDirBusinessObjects+"\\Services\\Generated\\"+SourceTable.Name+"Presenter.cs",true);
      
     
      if(!found){
          PresenterCustomTemplate childPresenterCustom = this.Create<PresenterCustomTemplate>();
          childPresenterCustom.ClassName = SourceTable.Name;
          childPresenterCustom.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
          childPresenterCustom.Licence = Licence;
          childPresenterCustom.SourceTable = SourceTable;
          childPresenterCustom.RenderToFile(this.OutPutDirBusinessObjects+"\\Services\\"+SourceTable.Name+"Presenter.cs",GeneratePresenters);
      }

      found =  File.Exists(this.OutPutDirUnitTestBusinessObjects+"\\"+SourceTable.Name+"PresenterTest.cs");
      if(!found){
          PresenterTestTemplate presenterTest = this.Create<PresenterTestTemplate>();
          presenterTest.ClassName = SourceTable.Name;
          presenterTest.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
          presenterTest.Licence = Licence;
          presenterTest.RenderToFile(this.OutPutDirUnitTestBusinessObjects+"\\"+SourceTable.Name+"PresenterTest.cs",GeneratePresenters);
      }
      

      found =  File.Exists(this.OutPutDirBusinessObjects+"\\Services\\Search"+SourceTable.Name+"Presenter.cs");
      if(!found){
          SearchFileTemplate search = this.Create<SearchFileTemplate>();
          search.ClassName = SourceTable.Name;
          search.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
          search.SourceTable = SourceTable;
          search.Licence = Licence;
          search.QueryTableColumns = QueryTableColumns;
          search.RenderToFile(this.OutPutDirBusinessObjects+"\\Services\\Search"+SourceTable.Name+"Presenter.cs",GeneratePresenters);
      }
      
  }
  
  found =  File.Exists(this.OutPutDirUserControls+"\\UserControls\\"+"UserControl"+SourceTable.Name+".Designer.cs");
  if(!found || GenerateUserControl)
  {
      UserInterfaceGeneratedTemplate childGenerated = this.Create<UserInterfaceGeneratedTemplate>();
      childGenerated.ClassName = SourceTable.Name;
      childGenerated.NameSpaceUI = NameSpaceUI;
      childGenerated.SourceTable = SourceTable;
      childGenerated.NameSpaceCommonUI = NameSpaceCommonUI;
      childGenerated.RenderToFile(this.OutPutDirUserControls+"\\UserControls\\"+"UserControl"+SourceTable.Name+".Designer.cs",GenerateUserControl);

      UserInterfaceCustomTemplate childCustom = this.Create<UserInterfaceCustomTemplate>();
      childCustom.ClassName = SourceTable.Name;
      childCustom.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
      childCustom.NameSpaceUI = NameSpaceUI;
      childCustom.Licence = Licence;
      childCustom.NameSpaceCommonUI = NameSpaceCommonUI;
      childCustom.SourceTable = SourceTable;
      childCustom.RenderToFile(this.OutPutDirUserControls+"\\UserControls\\"+"UserControl"+SourceTable.Name+".cs",GenerateUserControl);
      
      UserInterfaceResFileTemplate childResFile = this.Create<UserInterfaceResFileTemplate>();
      childResFile.RenderToFile(this.OutPutDirUserControls+"\\UserControls\\"+"UserControl"+SourceTable.Name+".resx",GenerateUserControl);
      
  }
  
  found =  File.Exists(this.OutPutDirCommonUI+"\\Forms\\"+"WindowSearch.Designer.cs");
  if(!found){
      
    WindowSearchTemplate windowsSearch = this.Create<WindowSearchTemplate>();
    windowsSearch.NameSpaceUI = NameSpaceCommonUI;
    windowsSearch.NameSpaceBusinessObjects = NameSpaceBusinessObjects;
    windowsSearch.Licence = Licence;
    windowsSearch.RenderToFile(this.OutPutDirCommonUI+"\\Forms\\"+"WindowSearch.cs",true);
      
    WindowSearchDesignerTemplate windowsSearchDesigner = this.Create<WindowSearchDesignerTemplate>();
    windowsSearchDesigner.NameSpaceUI = NameSpaceCommonUI;
    windowsSearchDesigner.RenderToFile(this.OutPutDirCommonUI+"\\Forms\\WindowSearch.Designer.cs",true);  
      
    WindowsSearchResFileTemplate WindowSearchResFile = this.Create<WindowsSearchResFileTemplate>();
    WindowSearchResFile.RenderToFile(this.OutPutDirCommonUI+"\\Forms\\WindowSearch.resx",true);
      
    UserControlGeographyTemplate userControlGeography = this.Create<UserControlGeographyTemplate>();
    userControlGeography.NameSpaceUI = NameSpaceCommonUI;
    userControlGeography.Licence = Licence;
    userControlGeography.RenderToFile(this.OutPutDirCommonUI+"\\Controls\\"+"UserControlGeography.cs",true);
    
      
    UserControlGeographyDesignerTemplate userControlGeographyDesigner = this.Create<UserControlGeographyDesignerTemplate>();
    userControlGeographyDesigner.NameSpaceUI = NameSpaceCommonUI;
    userControlGeographyDesigner.RenderToFile(this.OutPutDirCommonUI+"\\Controls\\"+"UserControlGeography.Designer.cs",true);
      
  
    UserControlGeographyResFileTemplate userControlGeographyResFile = this.Create<UserControlGeographyResFileTemplate>();
    userControlGeographyResFile.RenderToFile(this.OutPutDirCommonUI+"\\Controls\\"+"UserControlGeography.resx",true);
      
    UserControlBaseTemplate userControlBase = this.Create<UserControlBaseTemplate>();
    userControlBase.NameSpaceUI = NameSpaceCommonUI;
    userControlBase.Licence = Licence;
    userControlBase.SourceTable = SourceTable;
    userControlBase.RenderToFile(this.OutPutDirCommonUI+"\\Controls\\"+"UserControlBase.cs",true);
    
    UserControlBaseDesignerTemplate userControlBaseDesigner = this.Create<UserControlBaseDesignerTemplate>();
    userControlBaseDesigner.NameSpaceUI = NameSpaceCommonUI;
    userControlBaseDesigner.RenderToFile(this.OutPutDirCommonUI+"\\Controls\\"+"UserControlBase.Designer.cs",true);
      
    UserControlBaseResFileTemplate userControlBaseResFile = this.Create<UserControlBaseResFileTemplate>();
    userControlBaseResFile.RenderToFile(this.OutPutDirCommonUI+"\\Controls\\"+"UserControlBase.resx",true);
      
    HelperDataTableToExcelTemplate helperDataTableToExcelTemplate = this.Create<HelperDataTableToExcelTemplate>();
    helperDataTableToExcelTemplate.NameSpaceUI = NameSpaceUI;
    helperDataTableToExcelTemplate.Licence = Licence;
    helperDataTableToExcelTemplate.RenderToFile(this.OutPutDirCommonUI+"\\Helpers\\HelperDataTableToExcel.cs",true);
      
    BootstrapperTemplate   bootstrapperTemplate = this.Create<BootstrapperTemplate>();
    bootstrapperTemplate.NameSpaceUI = NameSpaceCommonUI;
    bootstrapperTemplate.Licence = Licence;
    bootstrapperTemplate.RenderToFile(this.OutPutDirCommonUI+"\\Helpers\\Bootstrapper.cs",true);  

    RegionalizationHelperTemplate regionalizationHelperTemplate = this.Create<RegionalizationHelperTemplate>();
    regionalizationHelperTemplate.NameSpaceUI = NameSpaceUI;
    regionalizationHelperTemplate.Licence = Licence;
    regionalizationHelperTemplate.RenderToFile(this.OutPutDirCommonUI+"\\Helpers\\RegionalizationHelper.cs",true);
      
    DataGridViewExtensionTemplate dataGridViewExtensionTemplate = this.Create<DataGridViewExtensionTemplate>();
    dataGridViewExtensionTemplate.NameSpaceUI = NameSpaceUI;
    dataGridViewExtensionTemplate.Licence = Licence;
    dataGridViewExtensionTemplate.RenderToFile(this.OutPutDirCommonUI+"\\Helpers\\DataGridViewExtension.cs",true);
      
  }

  GenerateUserControl = false;
  GenerateBusinessObjects = false;
  GenerateWindowsSearch = false;
  GenerateInterfaces = false;
  GeneratePresenters = false;
  
}

public string GetModelBuilder(){
    var result = "modelBuilder.Entity<" + SourceTable.Name + ">();\n\t\t\t";
    result = string.Concat(result,modelBuilder);
    return result;
}

public string GetVirtualDbSet(){
    var result = "public virtual DbSet<" + SourceTable.Name + "> "+ SourceTable.Name +" { get; set; }\n\t\t";
    result = string.Concat(result,dbSetVirtual);
    return result;
}

public string GetDbSet(){
    var result = "DbSet<" + SourceTable.Name + "> "+ SourceTable.Name +" { get; set; }\n\t\t";
     result = string.Concat(result,dbSetVirtual);
    return result;
}

public string GetISearchPresenter(){
    var result = string.Empty;
    result = string.Concat(result, "public static ISearchPresenter<"+SourceTable.Name+"> Make"+SourceTable.Name+"Search(IContext context)\n\t\t");
    result = string.Concat(result, "{\n\t\t\t");
    result = string.Concat(result, "ISearchPresenter<"+SourceTable.Name+"> instance = new Search"+SourceTable.Name+"Presenter(context);\n\t\t\t");
    result = string.Concat(result, "return instance;\n\t\t");
    result = string.Concat(result, "}\n\t\t");
    result = string.Concat(result, "\n\t\t");
    result = string.Concat(result, "//Requerido por el generador de CodeSmith no modifique esto");
    return result;
}

</script>