<%-- 
Name: Template de Entity
Author:Jose Roberto Taveras
Description: Para usar integrado con wisej
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Assembly Name="SchemaExplorer" %>
<%--<%@ Assembly Name="CodeSmith.Core" %>--%>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table to get the data from." %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Property Name="NameSpaceBusinessObjects" Type="System.String"%>
<%@ Property Name="ClassName" Type="System.String"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Property Name="QueryTableColumns" Type="SchemaExplorer.ColumnSchemaCollection" Category="Context" Description="Columns to show in the dataGridView" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Import NameSpace="System.Linq" %>
<%@ Property Name="Licence" Type="System.String"%>



//Author: Jose Roberto Taveras
//Email:roberto.taveras@hotmail.com
//Description: Poco de entidad <%= ClassName%>
//Fecha:<%= DateTime.Now%>
//Licencia:<%=Licence%>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using <%=NameSpaceBusinessObjects %>.Helpers;
using <%=NameSpaceBusinessObjects %>.Interfaces;
using <%=NameSpaceBusinessObjects %>.Models;
namespace <%= NameSpaceBusinessObjects %>.Services
{
    public class Search<%= ClassName %>Presenter : ISearchPresenter<%= "<"+ClassName+">" %>
    {
        private ISearch _sender;
        object id = <%=getCompare()%>;
		public IContext Context { get; private set; }
        public Search<%= ClassName %>Presenter(IContext context)
        {
            Context = context;
         
        }

        public void Search() {
        
            Type typeEntity = typeof(<%=ClassName%>);
            PropertyInfo propertyInfo = typeEntity.GetProperty("<%=SourceTable.Columns[0].Name%>");
            var type = propertyInfo.GetType().Name;

            if (!HelperParser.TryParse(type, _sender.ValueToSearch, id))
            {
                _sender.DataGridSource = <%= getQuery()%>;
            }
            else{
                _sender.DataGridSource = <%= getQueryById()%>;
            }
        }
        
        public <%= ClassName %> FindById(object id) {
            return Context.<%=ClassName%>.Find(id);
        }
        
        public List<%= "<"+ClassName+">" %> GetAll()
        {
            return Context.<%= ClassName %>.<%= GetFilterIsActivo() %>ToList();
        }
        
        public void DataBind(ISearch sender)
        {
            _sender = sender;
            Search();
        }
    }
}
 <script runat="template">
private string getCompare()
{
    var clm = GetDataType(SourceTable.Columns[0]);
    var result = "0";
    switch(clm)
    {
        case "Guid":
            result = "Guid.Empty";
            break;
        case "string":
            result = "string.Empty";
            break;
        default:
            result = "0";
            break;
        
    }
    return result;
}


private string GetFilterIsActivo(){
    return HasActivo() | HasTenantId() ? "Where( a => " +(HasActivo() ? "a.IsActivo ":"") + (HasTenantId() && HasActivo() ? " && ":"") +(HasTenantId() ? "a.TenantId == Context.TenantId ":"") +").":"";
}
public bool HasActivo() {
    return  SourceTable.Columns.Where( a => a.Name  == "IsActivo").ToList().Count > 0;
    
}

public bool HasTenantId() {
    return  SourceTable.Columns.Where( a => a.Name  == "TenantId").ToList().Count > 0;
    
}

public string getSelectedFields(){
        string columnlist = string.Empty;
    foreach (SchemaExplorer.ColumnSchema columna in QueryTableColumns)
    {
        var field = columna.ToString();
        int inicio = field.LastIndexOf(".",field.Length-1)+1;
        field = field.Substring(inicio,field.Length-inicio);
        columnlist = string.Concat(columnlist, "a.",field,",");
    }
    columnlist = columnlist.Substring(0,columnlist.Length-1);

   return columnlist;
}

public string getQueryById(){
    var clm = GetDataType(SourceTable.Columns[0]);
    string result = string.Concat("Context.",ClassName,".Where(a => ");
    var tenant = HasTenantId() ? " a.TenantId == Context.TenantId && " + (HasActivo() ? "  a.IsActivo && ":""): (HasActivo() ? "  a.IsActivo && ":"");
    result= string.Concat( result,tenant,"a.",SourceTable.PrimaryKey.MemberColumns[0].Name," == ("+clm+") id)",".Take(1).Select(a => new {"+ getSelectedFields()+"}).ToList()"); 
    return result;
}

public string getQuery(){
    
    string result = string.Concat("Context.",ClassName,".Where(a => ");
    
    var filter = string.Empty;
    for(int i = 0; i < SourceTable.Columns.Count; i++)
    {
        var clm = SourceTable.Columns[i];
       if(GetDataType(clm)  == "string")
         filter= string.Concat( filter,"a.",clm.Name,".Contains(_sender.ValueToSearch) || ");
    
    }
    
    
   
    
    filter = string.Concat(filter.Substring(0,filter.Length-3));
    
    if(filter.Length > 3)
    {
        if(HasTenantId())
        {
            
            result = string.Concat(result,"a.TenantId == Context.TenantId" , (HasActivo() ? " && a.IsActivo":"")," && (",filter,"))");
        }
        else
        {
             result = string.Concat(result,(HasActivo() ? "  a.IsActivo && (":""),filter ,")" ,(HasActivo() ?")":""));
        }
    }
    else
    {
       if(HasTenantId())
        {
            
            result = string.Concat(result,"a.TenantId == Context.TenantId",(HasActivo() ? " && a.IsActivo ":""));
        }
        else
        {
             result = string.Concat(result,(HasActivo() ? " a.IsActivo ":""));
        }
    }

        
    result = string.Concat(result,".Take(100).Select(a => new {"+ getSelectedFields()+"}).ToList()");
       
 
    return result;
}

public string GetDataType(ColumnSchema clm)
{
     var dataType = "";
    switch(clm.NativeType)
    {
        case "geography":
            dataType  = "DbGeography";
            break;
        case "geometry":
            dataType  = "DbGeometry";
            break;
        default:
            dataType = SqlCSharp[clm.NativeType];
            break;
        
    }
    return dataType;
}
 </Script>