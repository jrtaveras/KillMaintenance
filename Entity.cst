<%-- 
MIT License

Copyright (c) [2020] [Jose Roberto Taveras Galvan]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Name: Template de Entity
Author:Jose Roberto Taveras
Description: Para usar integrado con wisej
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table to get the data from." %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Property Name="NameSpaceBusinessObjects" Type="System.String"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="ClassName" Type="System.String"%>
<%@ Property Name="Licence" Type="System.String"%>

//Author: Jose Roberto Taveras
//Email:roberto.taveras@hotmail.com
//Description: Poco de entidad <%= ClassName%>
//Fecha:<%= DateTime.Now%>
//Licencia:<%=Licence%>
//No toques esto por que al regenerar se sobreescribe el codigo

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
<%=UsingSpatial()%>
using <%=NameSpaceBusinessObjects%>.Interfaces;

namespace <%= NameSpaceBusinessObjects %>.Models {
    [Table("<%=SourceTable.Name%>")]
    public partial class <%= ClassName %>  {
        <%=BuildProperties()%>
    }
}
 <script runat="template">

public string UsingSpatial(){
    List<string> lista = new List<string>();
    lista.Add("geography");
    lista.Add("geometry");
    bool result = false;
    for(int i = 0; i < SourceTable.Columns.Count; i++)
    {
        result = lista.Contains(SourceTable.Columns[i].NativeType);
        if(result)
            break;
    
    }
    return result ? "using System.Data.Entity.Spatial;":"";
}

public string test()
{ 

    string result ="";
    for(int i = 0; i < SourceTable.Columns.Count; i++)
        
    {
        
        if(SourceTable.Columns[i].IsForeignKeyMember)
        {
  
              var foreign =  SourceTable.ForeignKeys.Where( a => a.ForeignKeyMemberColumns.Where( b => b.Name == SourceTable.Columns[i].Name).Count() > 0 ).FirstOrDefault();
              if(foreign != null){
                 result += foreign.PrimaryKeyTable.Name;
                  result += foreign.PrimaryKeyTable.Columns[1].Name;
              }
             
            
        }
     
    }
    return result;
}



public string BuildProperties()
{
  
    string result ="";
    for(int i = 0; i < SourceTable.Columns.Count; i++)
    {
        
       result= string.Concat( result,DeclarationFromColumn(SourceTable.Columns[i]),"\t\t");
    }
    return result;
}

public string DeclarationFromColumn(ColumnSchema clm ) {

    var telefono = "TELEFONO";
    var phone = "PHONE";
    var mail    = "MAIL";
    var celular = "CELULAR";
    var mobil = "MOBIL";
    List<string> list = new List<string>();
    list.Add(telefono);
    list.Add(phone);
    list.Add(celular);
    list.Add(mobil);
    List<string> nonNull = new List<string>();
    nonNull.Add("string");
    nonNull.Add("DbGeography");
    nonNull.Add("DbGeometry");
    
    bool isNull = clm.AllowDBNull;
    var dataType = "";
    switch(clm.NativeType)
    {
        case "geography":
            dataType  = "DbGeography";
            break;
        case "geometry":
            dataType  = "DbGeometry";
            break;
        default:
            dataType = SqlCSharp[clm.NativeType];
            break;
        
    }
    bool isString =  dataType == "string";
    bool isKey = clm.IsPrimaryKeyMember;
    int size = clm.Size;
    bool notMapped =((bool)clm.ExtendedProperties["CS_IsComputed"].Value) == true;
     
    var fieldName = clm.Name;

    if(!isString && isNull  && !nonNull.Contains(dataType)){
        return "public " + dataType +"? " + fieldName + " {get; set;}\n";
    }else {
        string result = "";
        bool identity = ((bool)clm.ExtendedProperties["CS_IsIdentity"].Value) ;
        
        if(isKey)
        {
            if( !identity && (dataType.Contains("int") || dataType.Contains("long") ))
            {
                result = string.Concat(result,"[DatabaseGenerated(DatabaseGeneratedOption.None)]\n\t\t");
            }
            //result = "[Key]\n\t\t";
             result = string.Concat(result,"[Key]\n\t\t");
            
        }
          
        
        if(notMapped) {
        
           result = string.Concat(result,"[NotMapped]\n\t\t");
        }
       
      
       
        if(!isNull && !notMapped && !identity){
            result = string.Concat(result,"[Required(ErrorMessageResourceName = \"RequiredErrorMessage\",ErrorMessageResourceType = typeof(Resource))]\n\t\t");

        }
        
        if(dataType == "DateTime" && !notMapped)
        {
            result = string.Concat("[DateInitialization(ErrorMessageResourceName = \"DateInitialization\",ErrorMessageResourceType = typeof(Resource))]\n\t\t",result);
        }
        
        if(isString && !notMapped){
             
            result = string.Concat("[MaxLength("+size.ToString()+",ErrorMessageResourceName = \"MaxLengthErrorMessage\",ErrorMessageResourceType = typeof(Resource))]\n\t\t",result);
            var found = list.Where(a => fieldName.ToUpper().Contains( a )).Count() > 0;
            if(found)
                result = string.Concat("[Phone(ErrorMessageResourceName = \"PhoneErrorMessage\",ErrorMessageResourceType = typeof(Resource))]\n\t\t",result);
            
            if(fieldName.ToUpper().Contains(mail))
                result = string.Concat("[EmailAddress(ErrorMessageResourceName = \"EmailAddressErrorMessage\",ErrorMessageResourceType = typeof(Resource))]\n\t\t",result);
        }

         result = string.Concat(result,"public " + dataType +" " + fieldName + " {get; set;}\n");
 
        return result;
    }
}   
 </Script>