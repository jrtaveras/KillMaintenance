<%-- 
MIT License

Copyright (c) [2020] [Jose Roberto Taveras Galvan]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Name: Template de Presenter
Author:Jose Roberto Taveras
Description: Helper para traducir las columnas de un datagridview
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Property Name="NameSpaceUI" Category="Context" Type="System.String"%>
<%@ Property Name="Licence" Type="System.String"%>
//Author: Jose Roberto Taveras
//Email:roberto.taveras@hotmail.com
//Description:  Helper para traducciones , recorre el las columnas del datagridview que se le pasa como parametro y lo traduce an idioma especificado 
//Fecha:<%= DateTime.Now%>
//Licencia:<%=Licence%>

using BusinessObjects.Interfaces;
using System;
using System.ComponentModel;
using System.Reflection;
using Wisej.Web;

namespace <%=NameSpaceUI%>.Controls.Controls
{
    public delegate void RaiseUserControlSearchNumeric(object senderValue);
    public enum SearchNumericDataType { Integer, Long }

    [Browsable(true), EditorBrowsable(EditorBrowsableState.Always)]
    public partial class UserControlSearchNumeric : Wisej.Web.UserControl
    {
        public event RaiseUserControlSearchNumeric OnValueChange;
        public SearchNumericDataType SearchNumericDataType { get; set; }
        public string Label { get => textBoxDisplay.Label.Text; set => textBoxDisplay.Label.Text = value; }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public LabelPosition PotitionLabel { set { textBoxDisplay.Label.Position = value; } }

        private object _search;
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public string ValueMember { get; set; }
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public string DisplayMember { get; set; }
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]

        public object Value
        {
            get
            {
                if (SearchNumericDataType == SearchNumericDataType.Integer)
                {
                    int _value = 0;
                    int.TryParse(numericUpDownValue.Text, out _value);
                    return _value;
                }
                else
                {
                    long _value = 0;
                    long.TryParse(numericUpDownValue.Text, out _value);
                    return _value;
                }
            }
            set
            {
                DisplayValue = string.Empty;

                numericUpDownValue.Text = value.ToString();
                if (SearchNumericDataType == SearchNumericDataType.Integer)
                {
                    int _value = 0;
                    int.TryParse(numericUpDownValue.Text, out _value);
                    if (_value > 0)
                        search();
                    else
                    {
                        numericUpDownValue.Text = 0.ToString();
                        _value = 0;
                    }
                }
                else
                {
                    long _value = 0;
                    long.TryParse(numericUpDownValue.Text, out _value);
                    if (_value > 0)
                        search();
                    else
                    {
                        numericUpDownValue.Text = 0.ToString();
                        _value = 0;
                    }
                }
                if (OnValueChange != null)
                    OnValueChange(value);
            }
        }
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public string DisplayValue { get => textBoxDisplay.Text; set => textBoxDisplay.Text = value; }

        public UserControlSearchNumeric()
        {
            InitializeComponent();
        }
        public void SetDataSource(object search)
        {
            _search = search;
        }

        private void search()
        {
            if (_search == null)
            {
                throw new Exception("Debe especificar el presenter");
            }

            if (string.IsNullOrEmpty(ValueMember))
            {
                throw new Exception("Debe especificar el value member");
            }

            if (string.IsNullOrEmpty(DisplayMember))
            {
                throw new Exception("Debe especificar el display member");
            }

            Type objType = _search.GetType(); ;
            object found = null;
            MethodInfo method = objType.GetMethod("FindById");
            if (SearchNumericDataType == SearchNumericDataType.Long)
            {
                int _value = 0;
                int.TryParse(numericUpDownValue.Text, out _value);
                found = method.Invoke(_search, new object[] { _value });
                
                if (OnValueChange != null)
                    OnValueChange(value);
            }
            else
            {
                long _value = 0;
                long.TryParse(numericUpDownValue.Text, out _value);
                found = method.Invoke(_search, new object[] { _value });
                
                if (OnValueChange != null)
                    OnValueChange(value);
            }

            if (found != null)
            {
                if (SearchNumericDataType == SearchNumericDataType.Long)
                {
                    var result = (long)found.GetType().GetProperty(ValueMember).GetValue(found);
                    numericUpDownValue.Text = result.ToString();
                }
                else
                {
                    var result = (int)found.GetType().GetProperty(ValueMember).GetValue(found);
                    numericUpDownValue.Text = result.ToString();
                }
                textBoxDisplay.Text = found.GetType().GetProperty(DisplayMember).GetValue(found).ToString();
            }
            else
            {
                numericUpDownValue.Text = 0.ToString();

                DisplayValue = string.Empty;
            }
        }

        private void textBoxValue_Leave(object sender, EventArgs e)
        {
            try
            {
                search();
            }
            catch (Exception ex)
            {

                MessageBox.Show("Ha ocurrido un error" + ex.Message, "AVISO!!");
            }
        }

        private void buttonSearch_Click(object sender, EventArgs e)
        {
            var popop = new UserPopupSearch(_search);
            popop.Closed += (oSender, oE) => {
                if (popop.Id != null)
                {
                    numericUpDownValue.Text = popop.Id.ToString();
                    search();
                }
            };

            popop.ShowPopup(this);
        }

        private void textBoxDisplay_Enter(object sender, EventArgs e)
        {
            //if (string.IsNullOrEmpty(textBoxDisplay.Text) && Convert.ToInt64(Value) == 0)
            // numericUpDownValue.Value = 0;
        }

        private void numericUpDownValue_Leave(object sender, EventArgs e)
        {
            try
            {
                search();
            }
            catch (Exception ex)
            {

                MessageBox.Show("Ha ocurrido un error" + ex.Message, "AVISO!!");
            }
        }
    }
}

