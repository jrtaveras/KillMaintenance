<%-- 
Name: Template de Entity
Author:Jose Roberto Taveras
Description: Para usar integrado con wisej
--%>
<%@ Template Language="C#" TargetLanguage="C#"   %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table to get the data from." %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Property Name="NameSpaceBusinessObjects" Type="System.String"%>
<%@ Property Name="ClassName" Type="System.String"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import NameSpace="System.IO" %>
<%@ Import NameSpace="System.Collections.Generic" %>
<%@ Property Name="Licence" Type="System.String"%>

//Author: Jose Roberto Taveras
//Email:roberto.taveras@hotmail.com
//Description: Poco de entidad <%=ClassName%>
//Fecha:<%=DateTime.Now%>
//Licencia:<%=Licence%>
//No toques esto por que al regenerar se sobreescribe el codigo

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
<%=UsingSpatial()%>
namespace <%= NameSpaceBusinessObjects %>.Interfaces {
    public partial interface <%= ClassName %> {
        <%=BuildProperties()%>
    }
}
 <script runat="template">

public string UsingSpatial(){
    List<string> lista = new List<string>();
    lista.Add("geography");
    lista.Add("geometry");
    bool result = false;
    for(int i = 0; i < SourceTable.Columns.Count; i++)
    {
        result = lista.Contains(SourceTable.Columns[i].NativeType);
        if(result)
            break;
    
    }
    return result ? "using System.Data.Entity.Spatial;":"";
}

public string BuildProperties()
{
    
    string result ="";
    for(int i = 0; i < SourceTable.Columns.Count; i++)
    {
       result= string.Concat( result,DeclarationFromColumn(SourceTable.Columns[i]),"\t\t");
      
       
    }
    return result;
}

public string DeclarationFromColumn(ColumnSchema clm ) {

        bool isNull = clm.AllowDBNull;
        var dataType ="";
        switch(clm.NativeType)
        {
            case "geography":
                dataType  = "DbGeography";
                break;
            case "geometry":
                dataType  = "DbGeometry";
                break;
            default:
                dataType = SqlCSharp[clm.NativeType];
                break;
            
        }
            List<string> nonNull = new List<string>();
            nonNull.Add("string");
            nonNull.Add("DbGeography");
           nonNull.Add("DbGeometry");
        
        bool isString =  dataType == "string";
        bool isKey = clm.IsPrimaryKeyMember;
        int size = clm.Size;
         
        var fieldName = clm.Name;
    
        if(!isString && isNull && !nonNull.Contains(dataType)){
            return  dataType +"? " + fieldName + " {get; set;}\n";
        }else {
          var  result="";
            result = string.Concat(result,dataType +" " + fieldName + " {get; set;}\n");
            return result;
        }
}   
 </Script>